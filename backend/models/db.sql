


-- Users Table
CREATE TABLE IF NOT EXISTS "Users" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(50) DEFAULT 'client',
  bio TEXT DEFAULT '',
  skills VARCHAR(255)[] DEFAULT ARRAY[]::VARCHAR(255)[],
  "photoURL" VARCHAR(255) DEFAULT '',
  "hourlyRate" FLOAT DEFAULT 0,
  "isOnline" BOOLEAN DEFAULT FALSE,
  "lastSeen" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Files Table
CREATE TABLE IF NOT EXISTS "Files" (
  id SERIAL PRIMARY KEY,
  filename VARCHAR(255) NOT NULL,
  content_type VARCHAR(100) NOT NULL,
  size INTEGER NOT NULL,
  data BYTEA NOT NULL,
  uploaded_by UUID REFERENCES "Users"(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Chats Table
CREATE TABLE IF NOT EXISTS "Chats" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255),
  "isGroup" BOOLEAN DEFAULT FALSE,
  "lastMessageAt" TIMESTAMP,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Chat Participants Table (Many-to-Many)
CREATE TABLE IF NOT EXISTS "ChatParticipants" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  "userId" UUID REFERENCES "Users"(id) ON DELETE CASCADE,
  "chatId" UUID REFERENCES "Chats"(id) ON DELETE CASCADE,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE("userId", "chatId")
);

-- Messages Table
CREATE TABLE IF NOT EXISTS "Messages" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  content TEXT NOT NULL,
  read BOOLEAN DEFAULT FALSE,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "chatId" UUID REFERENCES "Chats"(id) ON DELETE SET NULL,
  "userId" UUID REFERENCES "Users"(id) ON DELETE SET NULL
);

-- First, drop all tables that depend on Jobs table
DROP TABLE IF EXISTS "JobLikes" CASCADE;
DROP TABLE IF EXISTS "SavedJobs" CASCADE;
DROP TABLE IF EXISTS "Replies" CASCADE;
DROP TABLE IF EXISTS "Comments" CASCADE;

-- Drop the Jobs table completely
DROP TABLE IF EXISTS "Jobs" CASCADE;

-- Drop any existing ENUM types
DROP TYPE IF EXISTS job_status CASCADE;
DROP TYPE IF EXISTS enum_Jobs_status CASCADE;

-- Jobs Table with simple TEXT status column
CREATE TABLE "Jobs" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  budget FLOAT NOT NULL,
  category VARCHAR(255) NOT NULL,
  skills VARCHAR(255)[] DEFAULT ARRAY[]::VARCHAR(255)[],
  status VARCHAR(50) DEFAULT 'open',
  "userId" UUID NOT NULL REFERENCES "Users"(id) ON UPDATE CASCADE,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT valid_status CHECK (status IN ('open', 'in_progress', 'completed', 'closed'))
);

-- Comments Table
CREATE TABLE "Comments" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  content TEXT NOT NULL,
  "jobId" UUID NOT NULL REFERENCES "Jobs"(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "userId" UUID NOT NULL REFERENCES "Users"(id) ON UPDATE CASCADE,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Replies Table
CREATE TABLE "Replies" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  content TEXT NOT NULL,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "userId" UUID REFERENCES "Users"(id) ON UPDATE CASCADE ON DELETE SET NULL,
  "commentId" UUID REFERENCES "Comments"(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Job Likes Table
CREATE TABLE "JobLikes" (
  "JobId" UUID REFERENCES "Jobs"(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "UserId" UUID REFERENCES "Users"(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("JobId", "UserId")
);

-- Saved Jobs Table
CREATE TABLE "SavedJobs" (
  "JobId" UUID REFERENCES "Jobs"(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "UserId" UUID REFERENCES "Users"(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("JobId", "UserId")
);

